// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Category {
  id     String  @id @default(uuid())
  title  String
  posts Post[] @relation("PostCategories")
}

model Post {
  id           String     @id @default(uuid())
  createdBy    User       @relation("CreatedPosts", fields: [createdById], references: [id])
  createdById  String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime?  @updatedAt
  updatedBy    String?
  title        String
  description  String?
  categories   Category[] @relation("PostCategories")
  comments     Comment[]  @relation(name: "PostComments")
}

model Comment {
    id        String   @id @default(uuid())
    text      String
    postId    String
    post      Post     @relation(name: "PostComments", fields: [postId], references: [id])
    createdById    String
    createdBy      User     @relation(name: "CreatedComments", fields: [createdById], references: [id])
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model User {
  id                  String   @id @default(uuid())
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  firstName           String
  lastName            String
  email               String   @unique
  hashedPassword      String?
  role                String   @default("CLIENT")
  createdPosts 	      Post[]   @relation("CreatedPosts")
  createdComments     Comment[] @relation("CreatedComments")

  tokens   Token[]
  sessions Session[]
}

model Session {
  id                 String    @id @default(uuid())
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  expiresAt          DateTime?
  handle             String    @unique
  hashedSessionToken String?
  antiCSRFToken      String?
  publicData         String?
  privateData        String?

  user   User?   @relation(fields: [userId], references: [id])
  userId String?
}

model Token {
  id          String   @id @default(uuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  hashedToken String
  type        String
  expiresAt   DateTime
  sentTo      String

  user   User   @relation(fields: [userId], references: [id])
  userId String

  @@unique([hashedToken, type])
}